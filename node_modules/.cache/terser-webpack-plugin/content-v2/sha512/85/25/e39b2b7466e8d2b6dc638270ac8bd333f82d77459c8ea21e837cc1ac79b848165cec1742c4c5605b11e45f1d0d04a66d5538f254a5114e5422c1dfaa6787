{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{209:function(e,t,a){\"use strict\";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"验证\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#验证\"}},[e._v(\"#\")]),e._v(\" 验证\")]),e._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[e._v(\"TIP\")]),e._v(\" \"),a(\"p\",[e._v(\"后台请求模仿了 Larvel FormRequest 来进行表单验证\")])]),e._v(\" \"),a(\"p\",[e._v(\"如果你不喜欢这种方法，可以直接使用 \"),a(\"code\",[e._v(\"Validate\")]),e._v(\" 验证方式。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"使用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用\"}},[e._v(\"#\")]),e._v(\" 使用\")]),e._v(\" \"),a(\"p\",[e._v(\"使用方法其实和 Validate 区别不大，已创建用户为例，在 user 模块的 request 目录创建 CreateUserRequest.php. 内容如下:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"class CreateRequest extends CatchRequest\\n{\\n\\n    protected function rules(): array\\n    {\\n        // TODO: Implement rules() method.\\n        return [\\n            'username|用户名' => 'require|max:20',\\n            'password|密码' => 'require|min:5|max:12',\\n            'passwordConfirm|密码' => 'confirm:password',\\n            'email|邮箱'    => 'require|email|unique:'.Users::class,\\n        ];\\n    }\\n\\n    protected function message(): array\\n    {\\n        // TODO: Implement message() method.\\n    }\\n}\\n\")])])]),a(\"p\",[e._v(\"就是这么简单，另外基类还提供了两个属性。\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"$needCreatorId  属性是否添加 creator_id，默认 true\")]),e._v(\" \"),a(\"li\",[e._v(\"$batch 是否批量验证 （不建议) 默认 false\")])]),e._v(\" \"),a(\"p\",[e._v(\"在 User 控制中直接注入到方法，就可以完美验证表单了。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\" public function save(CreateRequest $request)\\n\")])])]),a(\"h2\",{attrs:{id:\"自定义验证规则\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义验证规则\"}},[e._v(\"#\")]),e._v(\" 自定义验证规则\")]),e._v(\" \"),a(\"p\",[e._v(\"以项目中的 \"),a(\"code\",[e._v(\"sometimes\")]),e._v(\" 验证为例，只需要实现 \"),a(\"code\",[e._v(\"ValidateInterface\")]),e._v(\" 接口即可。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"namespace catcher\\\\validates;\\n\\nclass Sometimes implements ValidateInterface\\n{\\n\\n    public function type(): string\\n    {\\n        // TODO: Implement type() method.\\n        return 'sometimes';\\n    }\\n\\n    public function verify($value): bool\\n    {\\n        // TODO: Implement verify() method.\\n        if ($value) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public function message(): string\\n    {\\n        // TODO: Implement message() method.\\n        return '';\\n    }\\n}\\n\\n\")])])]),a(\"h4\",{attrs:{id:\"注入新验证\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注入新验证\"}},[e._v(\"#\")]),e._v(\" 注入新验证\")]),e._v(\" \"),a(\"p\",[e._v(\"在实现完新规则之后，只需要在 config\\\\catch.php 里面配置就可以了。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"'validates' => [\\n    \\\\catcher\\\\validates\\\\Sometimes::class,\\n  ],\\n\")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}